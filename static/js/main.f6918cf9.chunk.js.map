{"version":3,"sources":["components/ToggleButton.jsx","screens/Home/Home.jsx","reportWebVitals.js","index.js"],"names":["ToggleButton","children","bg","onClick","rest","useState","toggle","setToggle","handleClick","event","tog","on","e","off","originalData","require","Home","data","setData","filters","setFilters","headers","useEffect","console","log","length","filteredData","filter","seasons","f","includes","filterSeason","season","target","innerText","warn","idx","indexOf","newFilters","splice","direction","map","m","size","_focus","pos","key","top","item","i","join","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6918cf9.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Button } from '@chakra-ui/react';\r\n\r\n/**\r\n * returns custom field \"on\" in event object\r\n */\r\nconst ToggleButton = ({ children, bg, onClick, ...rest }) => {\r\n\tconst [toggle, setToggle] = useState(false);\r\n\r\n\tfunction handleClick(event, tog) {\r\n\t\tsetToggle(!toggle);\r\n\t\tonClick({\r\n\t\t\ton: !tog,\r\n\t\t\t...event,\r\n\t\t});\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Button onClick={(e) => handleClick(e, toggle)} bg={toggle ? bg.on : bg.off} {...rest}>\r\n\t\t\t{children}\r\n\t\t</Button>\r\n\t);\r\n};\r\n\r\nexport default ToggleButton;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Flex, Table, Thead, Tbody, Tr, Th, Td, Box } from '@chakra-ui/react';\r\n\r\nimport ToggleButton from 'components/ToggleButton';\r\nconst originalData = require('constants/data');\r\n\r\nconst Home = () => {\r\n\tconst [data, setData] = useState(originalData);\r\n\tconst [filters, setFilters] = useState([]);\r\n\t// const [filter, setFilter] = useState('');\r\n\tconst headers = ['seasons', 'item', 'room', 'bundle', 'details'];\r\n\tconst seasons = ['spring', 'summer', 'fall', 'winter'];\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log(filters);\r\n\r\n\t\tif (filters.length === 0) {\r\n\t\t\tsetData(originalData);\r\n\t\t} else {\r\n\t\t\tconst filteredData = originalData.filter(({ seasons }) => {\r\n\t\t\t\tfor (const f of filters) {\r\n\t\t\t\t\tif (seasons.includes(f)) return true;\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t});\r\n\t\t\tsetData(filteredData);\r\n\t\t}\r\n\t}, [filters]);\r\n\r\n\t// const handleFilter = (event) => console.log(event) || setFilter(event.target.value);\r\n\r\n\t// function addOrRemoveFilter(event) {\r\n\t//   // const filter =\r\n\t//   const filters = event.target.value.split(',');\r\n\t//   if (filters.includes())\r\n\t//   // if ()\r\n\t// }\r\n\r\n\t// const data = useMemo(() => filterSeason, [filters])\r\n\r\n\t// useEffect(() => {\r\n\t// \tconsole.log('running data filter handler');\r\n\t// \tconst filters = filter.split(',');\r\n\r\n\t// \t// let includeAnySeason = filters.includes('any') ? true : false;\r\n\r\n\t// \tif (filters !== '') {\r\n\t// \t\tconst filteredData = data.filter((entry) => {\r\n\t// \t\t\tfor (const f of filters) {\r\n\t// \t\t\t\t// if (includeAnySeason && entry.seasons.length === 0) return true;\r\n\t// \t\t\t\tif (entry.seasons.includes(f)) return true;\r\n\r\n\t// \t\t\t\treturn false;\r\n\t// \t\t\t}\r\n\t// \t\t\treturn false;\r\n\t// \t\t});\r\n\t// \t\tsetData(filteredData);\r\n\t// \t}\r\n\t// \t//  else {\r\n\t// \t// \tsetData(originalData);\r\n\t// \t// }\r\n\t// }, [filter, data]);\r\n\r\n\t// function addOrRemoveFilter(item) {\r\n\r\n\t// }\r\n\r\n\t// function filterSeason() {\r\n\t//   const res = data.filter(entry => {\r\n\t//     return filter.split(',').every(f => {\r\n\t//       return entry.season.includes(f)\r\n\t//     })\r\n\t//   })\r\n\t//   return fil\r\n\t// }\r\n\r\n\t// const filterDataBySeason = () => {\r\n\t// \tconsole.log(filters);\r\n\r\n\t// \tif (filters.length === 0) {\r\n\t// \t\tsetData(originalData);\r\n\t// \t} else {\r\n\t// \t\tconst filteredData = originalData.filter(({ seasons }) => {\r\n\t// \t\t\tfor (const f of filters) {\r\n\t// \t\t\t\tif (seasons.includes(f)) return true;\r\n\t// \t\t\t}\r\n\t// \t\t\treturn false;\r\n\t// \t\t});\r\n\t// \t\tsetData(filteredData);\r\n\t// \t}\r\n\t// };\r\n\r\n\tconst filterSeason = (event) => {\r\n\t\tconst season = event.target.innerText;\r\n\t\tconst on = event.on;\r\n\r\n\t\tconsole.log({ season, on });\r\n\r\n\t\tif (on) {\r\n\t\t\tif (filters.includes(season)) {\r\n\t\t\t\t// this shouldn't happen, so not handling it\r\n\t\t\t\tconsole.warn('unreachable state was reached');\r\n\t\t\t} else {\r\n\t\t\t\tsetFilters([season, ...filters]);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconst idx = filters.indexOf(season);\r\n\t\t\tif (idx > -1) {\r\n\t\t\t\tconst newFilters = [...filters];\r\n\t\t\t\tnewFilters.splice(idx, 1);\r\n\t\t\t\t// const newFilters = filters.splice(idx, 1);\r\n\t\t\t\tconsole.log('buildFilter', newFilters);\r\n\t\t\t\tsetFilters(newFilters);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Box>\r\n\t\t\t<Flex direction='column'>\r\n\t\t\t\t<Flex direction='row'>\r\n\t\t\t\t\t{seasons.map((season) => (\r\n\t\t\t\t\t\t<ToggleButton\r\n\t\t\t\t\t\t\tkey={season}\r\n\t\t\t\t\t\t\tonClick={filterSeason}\r\n\t\t\t\t\t\t\tbg={{ off: '#EDF2F7', on: 'lightblue' }}\r\n\t\t\t\t\t\t\tm={2}\r\n\t\t\t\t\t\t\tsize='sm'\r\n\t\t\t\t\t\t\t_focus={null}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{season}\r\n\t\t\t\t\t\t</ToggleButton>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</Flex>\r\n\t\t\t\t<Table>\r\n\t\t\t\t\t<Thead pos='sticky' bg='lightblue'>\r\n\t\t\t\t\t\t<Tr>\r\n\t\t\t\t\t\t\t{headers.map((key) => (\r\n\t\t\t\t\t\t\t\t<Th pos='sticky' top={0} bg='lightblue' key={key}>\r\n\t\t\t\t\t\t\t\t\t{key}\r\n\t\t\t\t\t\t\t\t</Th>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</Tr>\r\n\t\t\t\t\t</Thead>\r\n\t\t\t\t\t<Tbody>\r\n\t\t\t\t\t\t{data.map((item, i) => (\r\n\t\t\t\t\t\t\t<Tr key={i}>\r\n\t\t\t\t\t\t\t\t{headers.map((key) => (\r\n\t\t\t\t\t\t\t\t\t<Td key={`${i}-${key}`}>\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t// handle the season key slightly differently\r\n\t\t\t\t\t\t\t\t\t\t\tkey === 'seasons'\r\n\t\t\t\t\t\t\t\t\t\t\t\t? item[key].length === 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t? ''\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t: item[key].join(',')\r\n\t\t\t\t\t\t\t\t\t\t\t\t: item[key]\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t</Td>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</Tr>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</Tbody>\r\n\t\t\t\t</Table>\r\n\t\t\t</Flex>\r\n\t\t</Box>\r\n\t);\r\n};\r\n\r\nexport default Home;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { ChakraProvider } from '@chakra-ui/react';\n\nimport Home from 'screens/Home';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<ChakraProvider>\n\t\t\t<Home />\n\t\t</ChakraProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}